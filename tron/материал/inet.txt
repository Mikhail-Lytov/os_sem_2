inet - Man Page
Процедуры манипулирования интернет-адресами

Синопсис
#включить <sys/socket.h>
#включить <netinet/in.h>
#включить <arpa/inet.h>

int inet_aton(const char *cp, struct in_addr *inp);

in_addr_t inet_addr(const char *cp);
in_addr_t inet_network(const char *cp);

char *inet_ntoa(struct in_addr in);

структура in_addr inet_makeaddr(in_addr_t net, in_addr_t host);

in_addr_t inet_lnaof(struct in_addr in);
in_addr_t inet_netof(структура in_addr in);
Требования к макросу Feature Test для glibc (см. feature_test_macros(7)):

inet_aton(), inet_ntoa():

 Начиная с glibc 2.19:
 _DEFAULT_SOURCE
 В glibc до 2.19 включительно:
 _BSD_SOURCE || _BSD_SOURCE
Описание
inet_aton() преобразует адрес хоста Интернета cp из обозначения чисел и точек IPv4 в двоичную форму (в сетевом порядке байтов) и сохраняет его в структуре, на которую указывает inp. inet_aton() возвращает ненулевое значение, если адрес действителен, и ноль, если нет. Адрес, указанный в cp, может иметь одну из следующих форм:

a.b.c.d
Каждая из четырех числовых частей определяет байт адреса; байты назначаются слева направо для получения двоичного адреса.

a.b.c
Части a и b определяют первые два байта двоичного адреса. Часть c интерпретируется как 16-битное значение, определяющее два крайних правых байта двоичного адреса. Эта нотация подходит для указания (устаревших) Сетевые адреса класса В.

a.b
Часть а определяет первый байт двоичного адреса. Часть b интерпретируется как 24-битное значение, определяющее крайние три правых байта двоичного адреса. Эта нотация подходит для указания (устаревших) Сетевые адреса класса А.

a
Значение a интерпретируется как 32-битное значение, которое хранится непосредственно в двоичном адресе без какой-либо перестановки байтов.

Во всех вышеперечисленных формах компоненты точечного адреса могут быть заданы в десятичной, восьмеричной (с начальным 0) или шестнадцатеричной (с начальным 0X) формах. Адреса в любой из этих форм в совокупности называются обозначениями чисел и точек IPV4. Форма, которая использует ровно четыре десятичных числа, называется IPv4 dotted-decimal notation (или иногда: IPv4 dotted-quad notation).

inet_aton() возвращает 1, если предоставленная строка была успешно интерпретирована, или 0, если строка недопустима (errno не установлен при ошибке).

Функция inet_addr() преобразует адрес хоста Интернета cp из обозначения чисел и точек IPv4 в двоичные данные в сетевом порядке байтов. Если входные данные неверны, возвращается INADDR_NONE (обычно -1). Использование этой функции проблематично, поскольку -1 является допустимым адресом (255.255.255.255). Избегайте его использования в пользу inet_aton(), inet_pton(3)или getaddrinfo(3), которые обеспечивают более чистый способ указания возврата ошибки.

Функция inet_network() преобразует cp, строку в нотации IPv4 numbers-and-dots, в число в порядке байтов хоста, подходящее для использования в качестве сетевого адреса Интернета. При успешном выполнении возвращается преобразованный адрес. Если входные данные неверны, возвращается значение -1.

Функция inet_ntoa() преобразует адрес хоста Интернета взаданном в сети порядке байтов в строку в десятичной системе счисления IPv4. Строка возвращается в статически выделенный буфер, который последующие вызовы перезапишут.

Функция inet_lnaof() возвращает адрес локальной сети, входящий в состав интернет - адреса. Возвращаемое значение находится в порядке байтов хоста.

Функция inet_netof() возвращает часть сетевого номера интернет - адреса in. Возвращаемое значение находится в порядке байтов хоста.

Функция inet_makeaddr() является обратной функции inet_netof() и inet_lnaof(). Он возвращает адрес интернет-хоста в порядке байтов сети, созданный путем объединения номера сети net с локальным адресом хоста, как в порядке байтов хоста.

Структура in_addr, используемая в inet_ntoa(), inet_makeaddr(), inet_lnaof() и inet_netof(), определяется в <netinet/in.h><netinet/in.h> следующим образом::

typedef uint32_t in_addr_t;

struct in_addr {
 in_addr_t s_addr;
};
Атрибуты
Объяснение терминов, используемых в этом разделе, см. в разделе Атрибуты(7).

Интерфейс	Атрибут	Значение
inet_aton(), inet_addr(), inet_network(), inet_ntoa()	Безопасность резьбы	MT-Безопасный локаль
inet_makeaddr(), inet_lnaof(), inet_netof()	Безопасность резьбы	МТ-Сейф
Соответствие требованиям
inet_addr(), inet_ntoa(): POSIX.1-2001, POSIX.1-2008, 4.3 BSD.

inet_aton() не указан в POSIX.1, но доступен в большинстве систем.

Примечания
В архитектурах x86 порядок байтов хоста является наименее значимым первым байтом (little endian), тогда как порядок байтов сети, используемый в Интернете, является наиболее значимым первым байтом (big endian).

inet_lnaof(), inet_netof() и inet_makeaddr() - это устаревшие функции, которые предполагают, что они имеют дело с классовыми сетевыми адресами. Classful networking делит сетевые адреса IPv4 на хост и сетевые компоненты на границах байтов следующим образом:

Класс А
Этот тип адреса обозначается значением 0 в самом значащем бите адреса (упорядоченного по сетевым байтам). Сетевой адрес содержится в самом значимом байте, а адрес хоста занимает оставшиеся три байта.

Класс В
Этот тип адреса обозначается двоичным значением 10 в двух наиболее значимых битах адреса. Сетевой адрес содержится в двух наиболее значимых байтах, а адрес хоста занимает оставшиеся два байта.

Класс С
Этот тип адреса обозначается двоичным значением 110 в трех наиболее значимых битах адреса. Сетевой адрес содержится в трех наиболее значимых байтах, а адрес хоста занимает оставшийся байт.

Классовые сетевые адреса в настоящее время устарели, их заменила Бесклассовая междоменная маршрутизация (CIDR), которая делит адреса на сетевые и хост-компоненты на произвольных битовых (а не байтовых) границах.

Примеры
Пример использования inet_aton() и inet_ntoa() показан ниже. Вот несколько примеров запусков:

$ ./a.out 226.000.000.037 # Последний байт в восьмеричном виде
226.0.0.31
$ ./a.out 0x7f.1 # Первый байт в шестнадцатеричном формате
127.0.0.1
Источник программы
#определить _BSD_SOURCE
#включить <arpa/inet.h>
#включить <stdio.h>
#включить <stdlib.h>

int
main(int argc, char *argv[])
{
 struct in_addr addr;

 if (argc != 2) {
fprintf(stderr, "%s <точечный адрес>\n", argv[0]);
 exit(EXIT_FAILURE);
 }

 if (inet_aton(argv[1], &addr) == 0) {
fprintf(stderr, "Недопустимый адрес\n");
 exit(EXIT_FAILURE);
 }

 printf("%s\n", inet_ntoa(addr));
 exit(EXIT_SUCCESS);
}
См. также
byteorder(3), getaddrinfo(3), gethostbyname(3), getnameinfo(3), getnetent(3), inet_net_pton(3), inet_ntop(3), inet_pton(3), hosts(5), networks(5)

Колофон
Эта страница является частью версии 5.13 проекта Linux man-pages. Описание проекта, информацию о сообщениях об ошибках и последнюю версию этой страницы можно найти по адресу: https://www.kernel.org/doc/man-pages/.

Ссылка на
flowdumper(1), freetds.conf(5), getaddrinfo(3), getaddrinfo_a(3), gethostbyname(3), inet_net_pton(3), inet_ntop(3), inet_pton(3), innbind(8), ip(7), kernel(6), networks(5), openarc.conf(5), opendkim(8), opendkim.conf(5), tcllib_ip(n), telnet(1).

Справочные страницы inet_addr(3), inet_aton(3), inet_lnaof(3), inet_makeaddr(3), inet_netof(3), inet_network(3) и inet_ntoa(3) являются псевдонимами inet(3).

2021-03-22 Руководство программиста GNU Linux
